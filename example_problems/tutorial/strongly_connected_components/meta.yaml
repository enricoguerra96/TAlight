%YAML 1.2
---
public_folder: public
services:
  check_is_sc:
    description: This service will check your statement that a directed graph you provide us is strongly connected.
    evaluator: [python,services/is_sc_server.py]
    args:     
      sc_bool:
        regex: ^1$
        default: 1
      input_mode:
        regex: ^(terminal|TA_send_files_bot)$
        default: terminal
        explain: "choose the way to input your graph among:"
        explain1: "[terminal] you enter your instance (directed graph) directly by either typing it line after line or through cut and paste operations."
        explain2: "[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must to use the TA_send_files_bot.py bot placed in model_pirellone/bots/ directory. Call the service with: rtal connect strongly_connected_components check_is_sc -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_graph.txt."
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(silent|yes_no|gimme_your_certificate)$
        default: silent
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_is_not_sc:
    description: This service will check your statement that a directed graph you provide us is not strongly connected
    evaluator: [python,services/is_sc_server.py]
    args:
      sc_bool:
        regex: ^0$
        default: 0
      input_mode:
        regex: ^(terminal|TA_send_files_bot)$
        default: terminal
        explain: "choose the way to input your graph among:"
        explain1: "[terminal] you enter your instance (directed graph) directly by either typing it line after line or through cut and paste operations."
        explain2: "[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must to use the TA_send_files_bot.py bot placed in model_pirellone/bots/ directory. Call the service with: rtal connect strongly_connected_components check_is_not_sc -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_graph.txt."
      goal:
        regex: ^(correct|with_certificate)$
        default: correct
      feedback:
        regex: ^(silent|yes_no|gimme_your_certificate)$
        default: silent
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_recognizer_sc:
    description: Given a directed graph, can you decide whether it is strongly connected?
    evaluator: [python,services/eval_recognizer_sc_server.py]
    args:
      goal:
        regex: ^(yes_no)$
        default: yes_no
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
      seed:
        explain: specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  gimme_scc:
    description: This service receives from you a directed graph and then separates its strongly connected components listing them out according to a topological sort
    evaluator: [python,services/gimme_scc_server.py]
    args:   
      n:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: Number of nodes.
      m:
        regex: ^([1-9][0-9]{0,2}|1000|lazy)$
        default: lazy
        explain: Number of arcs.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_find_scc:
    description: Given a directed graph, can you find its strongly connected components?
    evaluator: [python,services/eval_find_scc_server.py]
    args:
     goal:
        regex: ^(yes_no)$
        default: yes_no
     seed:
        explain: specify the numeric code to reproduce the very same psudo-random instance G as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{0,5})$
        default: random_seed
     code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
     lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
