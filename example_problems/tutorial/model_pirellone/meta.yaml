%YAML 1.2
---
public_folder: public
services:
  gimme_instance:
    description: This service provides you with a random pirellone instance, i.e., a 0/1-matrix with the given number of rows (argument m) and columns (argument n). You can also specify (1) whether this pirellone should be solvable or not, or let it to the service to decide; and (2) whether you want to get only the random seed for the instance or also the instance file downloaded and/or its display on the screen. If you opt to insert the seed yourself, you can not decide about the solvability, but you can still ask for the file and/or its listing on the screen.
    evaluator: [python,services/gimme_instance_server.py]
    args:
      input_mode:
        regex: ^(random|seed)$
        default: random
        explain: "choose the way to input your pirellone among:" 
        explain1: "[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>."
        explain2: "[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>."
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      seed:
        explain: 'This argument is needed only when you already hold a specific instance descriptor and are only interested in obtaining the instance file downloaded in local and/or just its listing on your terminal screen. By a \''descriptor\'' we mean a triple <m,n,seed> that you hold from previous calls to this or other services of the pirellone problem.'
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      instance_solvability:
        regex: ^(solvable|unsolvable|surprise_me)$
        default: surprise_me
      silent:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then only the bare instance will be printed. In this way, if you redirect the output to file ('>') you will get a valid instance file for the other services.
      # display:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: If this flag is set to 1 then the instance file is listed by the service.
      # download:
      #   regex: ^(0|1)$
      #   default: 0
      #   explain: 'If this flag is set to 1 then the instance file is downloaded in the \''download\'' sub-folder of the folder from which this TALight service call has been issued.'
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  compact_sol:
    description: We give you a 0,1-matrix and a sequence of switch row/column operations that leads to the all-0 matrix. You are required to shorten this sequence. You can also specify the random seed for a solvable  <m,n,seed> instance.
    evaluator: [python,services/compact_sol_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: "choose the way to input your pirellone among:" 
        explain1: "[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>."
        explain2: "[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>."
        explain3: "[terminal] you enter your instance (pirellone) directly by either typing it line after line or through cut and paste operations."
        # explain4: "[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the model_pirellone/bots/ directory. Call the service with: rtal connect model_pirellone compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_pirellone.txt."
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      goal:
        regex: ^(m_plus_n|m_plus_n_half|min)$
        default: m_plus_n
        explain: "Set an upper-bound on the length of your solution. The choiches are as follows:"
        explain1: "[m_plus_n]  yield a solution with at most m+n moves."
        explain2: "[m_plus_n_half]  yield a solution with at most (m+n)/2 moves."
        explain3: "[min]  yield a solution with the minimum possible number of moves."
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  gimme_sol:
    description: "This service provides you with a solution for an instance (either provided by you or generated at random). You can even call this service on an already encountered instance (also met with other services): a random instance can be reconstructed from m, n, and its random seed."
    evaluator: [python, services/gimme_sol_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: "choose the way to input your pirellone among:" 
        explain1: "[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>."
        explain2: "[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>."
        explain3: "[terminal] you enter your instance (pirellone) directly by either typing it line after line or through cut and paste operations."
        # explain4: "[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the model_pirellone/bots/ directory. Call the service with: rtal connect model_pirellone compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_pirellone.txt."
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=000000, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: "choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively."
        example: "[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  check_sol:
    description: "This service checks your solution for an instance (either provided by you or generated at random). You can even call this service on an already encountered random instance (also met with other services): a random instance can be reconstructed from m, n, and its random seed."
    evaluator: [python, services/check_sol_server.py]
    args:
      input_mode:
        regex: ^(random|seed|terminal)$
        # NOTE: tolto TA_send_files_bot in quanto impedisce poi di ricevere input da terminale, funzione necessaria al fine di sottomettere la propria soluzione più corta.
        # regex: ^(random|seed|terminal|TA_send_files_bot)$
        default: random
        explain: "choose the way to input your pirellone among:" 
        explain1: "[random] the service generate a seed at random and then returns it as well as the pseudo-random instance <m,n,seed>."
        explain2: "[seed] the service uses the seed specificated to generate and return the pseudo-random instance <m,n,seed>."
        explain3: "[terminal] you enter your instance (pirellone) directly by either typing it line after line or through cut and paste operations."
        # explain4: "[TA_send_files_bot] with this, you can send to the service an instance (pirellone) encoded in a file sitting in your machine. To send the file you must use the TA_send_files_bot.py bot placed in the model_pirellone/bots/ directory. Call the service with: rtal connect model_pirellone compact_sol -ainput_mode=TA_send_files_bot -- path_to_bot_dir/TA_send_files_bot.py path_to_instance_file_dir/your_pirellone.txt."
      m:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of rows of the pirellone.
      n:
        regex: ^([1-9][0-9]{0,1})$
        default: 4
        explain: Number of columns of the pirellone.
      seed:
        explain: specify the numeric code to reproduce the very same pseudo-random instance as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(000000|[1-9][0-9]{5,5})$
        default: 000000
      sol_style:
        regex: ^(seq|subset)$
        default: seq
        explain: "choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively."
        example: "[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  try_GMPL_model:
    description: "Even if you do not have `glpsol` installed on your machine, still with this service you can send to our server the .mod file containing your GMPL model and a .dat file containing an instance of the problem. The service will apply your model to your instance and then use the glpsol engine to find out a solution following your instructions. To send the file you must use the TA_send_files_bot.py bot placed in the model_pirellone/bots/ directory. Call the service with:\n    rtal connect model_pirellone try_GMPL_model -- path_to_bot_dir/TA_send_files_bot.py mod=path_to_model_file_dir/your_pirellone.mod dat=path_to_instance_file_dir/your_pirellone.dat input=path_to_input_file/input.txt\nHere, the `input.txt` file is required only if you want to get a validation of the solution contained in the file `solution.txt` generated by your model on the server. Examples for the format for the `input.txt` file can be found in the `examples` directory (see in the archive downloaded with `rtal get model_pirellone`)."
    evaluator: [python, services/try_GMPL_model_server.py]
    args:
      display_output:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, display the output of GPLSOL.
      display_error:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, display the log that `glpsol` running on the server sends to stderr.
      check_solution:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, the solution obtained from GPLSOL will be checked. In order to perform this check, it is mandatory that also the input.txt file is sent to the sever via the TA_send_files_bot.py 
      sol_style:
        regex: ^(seq|subset)$
        default: subset
        explain: "choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively."
        example: "[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  eval_GMPL_model:
    evaluator: [python, services/eval_GMPL_model_server.py]
    args:
      goal:
        regex: ^(public_examples|m_and_n_at_most_5_solvable|m_and_n_at_most_5_unsolvable|m_and_n_at_10|m_and_n_at_20|m_and_n_at_30|m_and_n_at_50|m_and_n_at_100|m_and_n_at_200|m_and_n_at_300)$
        default: public_examples
        explain: To solve bigger instances you might need smarter models, either using some tricks or, even more powerful, a better understanding of the structural properties of the problem.
      type_of_check:
        regex: ^(no|yes|min)$
        default: no
        explain: "choose among the following options:" 
        explain1: "[no] the `solution.txt` file written by your model is considered ok if it begins with the string 'NO SOLUTION' if and only if the testcase pirellone instance has no solution."
        explain2: "[yes] beyond the above requirement, for all solvable instances, the `solution.txt` file should contain a valid solution which will be checked by the service."
        explain3: "[min] beyond the above requirement, for all solvable instances, the `solution.txt` should contain the minimum solution."
      only_solvable_instances:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1, then your model will be tested only on instances that are guaranteed to possess a solution.
      sol_style:
        regex: ^(seq|subset)$
        default: subset
        explain: "choose how to encode the solution[seq]. Either as a list of commands, or as a subset of the row and column switches (i.e., as two incidence 0/1-vectors of length m and n, respectively."
        example: "[seq] r2 c4 r3 r1, [subset]: 1 0 1\n0 1 1 if the matrix is 3x3"
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  eval_SAT_model:
    evaluator: [python, services/eval_SAT_model_server.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explain: Set your goal (efficient includes also correct).
      with_check_of_sol:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, for the yes instances, you should also provide a solution which will be checked by the service.
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  eval_MiniZinc_model:
    evaluator: [python, services/eval_MiniZinc_model_server.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explain: Set your goal (efficient includes also correct).
      with_check_of_sol:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, for the yes instances, you should also provide a solution which will be checked by the service.
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  
  eval_your_solver_bot:
    description: "This service checks your solution for an instance (either provided by you or generated at random). You can even call this service on an already encountered solvable random instance (also met with other services): a solvable random instance can be reconstructed from m, n, and its random seed."
    evaluator: [python, services/eval_decision_server.py]
    args:
      goal:
        regex: ^(correct|efficient)$
        default: correct
        explain: Set your goal (efficient includes also correct).
      with_check_of_sol:
        regex: ^(0|1)$
        default: 0
        explain: If this flag is set to 1 then, for the yes instances, you should also provide a solution which will be checked by the service.
      seed:
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it

  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it