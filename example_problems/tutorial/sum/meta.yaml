%YAML 1.2
---
public_folder: public
services:
  free_sum:
    description: You are given a sum value and are asked to return two natural numbers having that sum. You can also pose yourself the challenge to return such a pair of numbers for which the product is largest possible.
    evaluator: [python, services/free_sum/advanced/free_sum_server.py]
    #evaluator: [python, services/free_sum/simple/free_sum_server.py]
    args:
      numbers:
        regex: ^(onedigit|twodigits|big)$
        default: twodigits
      obj:
        regex: ^(any|max_product)$
        default: any
      num_questions:
        regex: ^([1-9]|[1-2][0-9]|30)$
        default: 10
        explain: a number from 1 to 30, the number of questions posed to the problem solver
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  sum_and_difference:
    description: You are given the sum and difference of two natural numbers and your goal is to identify the two numbers.
    #evaluator: [python, services/sum_and_difference/simple/sum_and_difference_server.py]
    evaluator: [python, services/sum_and_difference/advanced/sum_and_difference_server.py]
    args:
      numbers:
        regex: ^(onedigit|twodigits|big)$
        default: onedigit
      num_questions:
        regex: ^([1-9]|[1-2][0-9]|30)$
        default: 10
        explain: a number from 1 to 30, the number of questions posed to the problem solver
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  sum_and_product:
    description: You are given the sum and the product of two natural numbers and your goal is to identify the two numbers.
    evaluator: [python, services/sum_and_product/simple/sum_and_product_server.py]
    #evaluator: [python, services/sum_and_product/advanced/sum_and_product_server.py]
    args:
      numbers:
        regex: ^(onedigit|twodigits|big)$
        default: onedigit
      num_questions:
        regex: ^([1-9]|[1-2][0-9]|30)$
        default: 10
        explain: a number from 1 to 30, the number of questions posed to the problem solver
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  help:
    evaluator: [python, services/help/help_server.py]
    args:
      page:
        regex: ^(sum|free_sum|sum_and_difference|sum_and_product|help|synopsis)$
        default: help
      lang:
        regex: ^(en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_server.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem {problem}
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
...
